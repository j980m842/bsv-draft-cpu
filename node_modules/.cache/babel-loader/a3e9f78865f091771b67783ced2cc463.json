{"ast":null,"code":"import { updateDraftRoster } from \"./updateDraftRoster\";\nimport { startingPriority } from \"./startingPriority\";\nimport { pickSequence } from \"./pickSequence\";\nimport { armorSort } from \"./armorSort\";\nlet draftRoster = updateDraftRoster();\n//SORTING FUNCTIONS WORKING!!\nlet armorSorted = armorSort();\nlet highestArmor = armorSorted.filter(tied => tied._armor === armorSorted[0]._armor);\n//console.log(highestArmor)\n\nlet healthSorted = heroRoster.healthSort();\nlet highestHealth = healthSorted.filter(tied => tied._health === healthSorted[0]._health);\nexport let userHeroes = [];\nexport let aIHeroes = [];\n//TRYING TO FIGURE OUT HOW TO MANUALLY INPUT PICKS\n/*let prompt = require('prompt');\nprompt.start();\nawait prompt.get(['hero', 'row', 'column', 'bookReadPosition'], function (err: any, result: any) {\n  console.log(result.hero);\n});\n*/\n\nexport async function draft() {\n  if (currentPick === \"ally\") {\n    /*let prompt = require('prompt');\n    prompt.start();\n    await prompt.get(['hero', 'row', 'column', 'bookReadPosition'], function (err: any, result: any) {\n    console.log('Command-line input received:');\n    console.log(result.hero);\n    pick(result.hero, result.row, result.column, result.bookReadPosition)\n    });*/\n    pick(userPicks.shift(0), 2, 2, 5);\n  } else {\n    armorSorted = armorSort();\n    highestArmor = armorSorted.filter(tied => tied._armor === armorSorted[0]._armor);\n    pick(highestArmor[0]._name, 1, 2, 2);\n  }\n}\n\n//DRAFT \n\nlet userPicks = [\"werewolf\", \"poisonMage\", \"iceMage\", \"blacksmith\", \"berserker\"]; // find a way to be able to type this rather than any type!\n\nlet firstpick = startingPriority();\n//console.log(firstpick)\nlet pickSequenceArray = pickSequence(firstpick);\nlet currentPick = firstpick;\nlet pickNumber = 0;\n//console.log(firstpick);\n//console.log(pickSequenceArray);\n\n//this function selects a draftable hero and changes board position, h = hero, r = row, c = column, brp = bookread position\nfunction pick(h, r, c, brp) {\n  //I think hero name, row, and column all need to be types\n  let picked = heroRoster.Find(h);\n  if (picked._draftable === false) {\n    console.log(\"That hero isn't draftable!\");\n  } else {\n    picked._draftable = false;\n    picked._boardPositionRow = r;\n    picked._boardPositionColumn = c;\n    picked._bookReadPosition = brp;\n    if (currentPick === \"ally\") {\n      userHeroes.push(picked._name);\n    } else {\n      aIHeroes.push(picked._name);\n    }\n    //add functionality to add the selected hero to an actual team's board\n  }\n\n  draftRoster = updateDraftRoster();\n  pickNumber++;\n  currentPick = pickSequenceArray[pickNumber];\n}","map":{"version":3,"names":["updateDraftRoster","startingPriority","pickSequence","armorSort","draftRoster","armorSorted","highestArmor","filter","tied","_armor","healthSorted","heroRoster","healthSort","highestHealth","_health","userHeroes","aIHeroes","draft","currentPick","pick","userPicks","shift","_name","firstpick","pickSequenceArray","pickNumber","h","r","c","brp","picked","Find","_draftable","console","log","_boardPositionRow","_boardPositionColumn","_bookReadPosition","push"],"sources":["/Users/j980m842/Documents/Development/bsv-draft-ai/src/components/draftSystem.ts"],"sourcesContent":["\nimport { updateDraftRoster } from \"./updateDraftRoster\";\nimport { Team } from \"./Team\";\nimport { startingPriority } from \"./startingPriority\";\nimport { pickSequence } from \"./pickSequence\";\nimport { armorSort } from \"./armorSort\";\n\n\n\nlet draftRoster: Array<Hero> = updateDraftRoster()\n//SORTING FUNCTIONS WORKING!!\nlet armorSorted: Array<Hero> = armorSort();\nlet highestArmor: Array<Hero> = armorSorted.filter(tied => tied._armor === armorSorted[0]._armor)\n//console.log(highestArmor)\n\n\nlet healthSorted: Array<Hero> = heroRoster.healthSort();\nlet highestHealth: Array<Hero> = healthSorted.filter(tied => tied._health === healthSorted[0]._health)\nexport let userHeroes: Array<string> = []\nexport let aIHeroes: Array<string> = []\n\ndeclare function require(name: string): any;\n\n//TRYING TO FIGURE OUT HOW TO MANUALLY INPUT PICKS\n/*let prompt = require('prompt');\nprompt.start();\nawait prompt.get(['hero', 'row', 'column', 'bookReadPosition'], function (err: any, result: any) {\n  console.log(result.hero);\n});\n*/\n\nexport async function draft() {\n    if(currentPick === \"ally\") {\n        /*let prompt = require('prompt');\n        prompt.start();\n        await prompt.get(['hero', 'row', 'column', 'bookReadPosition'], function (err: any, result: any) {\n        console.log('Command-line input received:');\n        console.log(result.hero);\n        pick(result.hero, result.row, result.column, result.bookReadPosition)\n        });*/\n        pick(userPicks.shift(0), 2, 2, 5);\n        \n    }\n    else {\n        armorSorted = armorSort();\n        highestArmor = armorSorted.filter(tied => tied._armor === armorSorted[0]._armor)\n        pick(highestArmor[0]._name, 1, 2, 2)\n\n        \n    }\n}\n\n//DRAFT \n\nlet userPicks: any = [\"werewolf\", \"poisonMage\", \"iceMage\", \"blacksmith\", \"berserker\"] // find a way to be able to type this rather than any type!\n\nlet firstpick: Team = startingPriority();\n//console.log(firstpick)\nlet pickSequenceArray: Array<Team> = pickSequence(firstpick);\nlet currentPick: Team = firstpick;\nlet pickNumber = 0;\n//console.log(firstpick);\n//console.log(pickSequenceArray);\n\n//this function selects a draftable hero and changes board position, h = hero, r = row, c = column, brp = bookread position\nfunction pick(h: string, r: number, c: number, brp: number) { //I think hero name, row, and column all need to be types\n    let picked: Hero = heroRoster.Find(h);\n        if (picked._draftable === false) {\n            console.log(\"That hero isn't draftable!\");\n        } else {\n            picked._draftable = false;\n            picked._boardPositionRow = r;\n            picked._boardPositionColumn = c;\n            picked._bookReadPosition = brp;\n            if(currentPick === \"ally\") {\n                userHeroes.push(picked._name);\n            }\n            else {\n                aIHeroes.push(picked._name);\n            }\n            //add functionality to add the selected hero to an actual team's board\n        }\n        draftRoster = updateDraftRoster();\n        pickNumber ++;\n        currentPick = pickSequenceArray[pickNumber]\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"mappings":"AACA,SAASA,iBAAiB,QAAQ,qBAAqB;AAEvD,SAASC,gBAAgB,QAAQ,oBAAoB;AACrD,SAASC,YAAY,QAAQ,gBAAgB;AAC7C,SAASC,SAAS,QAAQ,aAAa;AAIvC,IAAIC,WAAwB,GAAGJ,iBAAiB,EAAE;AAClD;AACA,IAAIK,WAAwB,GAAGF,SAAS,EAAE;AAC1C,IAAIG,YAAyB,GAAGD,WAAW,CAACE,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,MAAM,KAAKJ,WAAW,CAAC,CAAC,CAAC,CAACI,MAAM,CAAC;AACjG;;AAGA,IAAIC,YAAyB,GAAGC,UAAU,CAACC,UAAU,EAAE;AACvD,IAAIC,aAA0B,GAAGH,YAAY,CAACH,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACM,OAAO,KAAKJ,YAAY,CAAC,CAAC,CAAC,CAACI,OAAO,CAAC;AACtG,OAAO,IAAIC,UAAyB,GAAG,EAAE;AACzC,OAAO,IAAIC,QAAuB,GAAG,EAAE;AAIvC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,eAAeC,KAAK,GAAG;EAC1B,IAAGC,WAAW,KAAK,MAAM,EAAE;IACvB;AACR;AACA;AACA;AACA;AACA;AACA;IACQC,IAAI,CAACC,SAAS,CAACC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAErC,CAAC,MACI;IACDhB,WAAW,GAAGF,SAAS,EAAE;IACzBG,YAAY,GAAGD,WAAW,CAACE,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,MAAM,KAAKJ,WAAW,CAAC,CAAC,CAAC,CAACI,MAAM,CAAC;IAChFU,IAAI,CAACb,YAAY,CAAC,CAAC,CAAC,CAACgB,KAAK,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAGxC;AACJ;;AAEA;;AAEA,IAAIF,SAAc,GAAG,CAAC,UAAU,EAAE,YAAY,EAAE,SAAS,EAAE,YAAY,EAAE,WAAW,CAAC,EAAC;;AAEtF,IAAIG,SAAe,GAAGtB,gBAAgB,EAAE;AACxC;AACA,IAAIuB,iBAA8B,GAAGtB,YAAY,CAACqB,SAAS,CAAC;AAC5D,IAAIL,WAAiB,GAAGK,SAAS;AACjC,IAAIE,UAAU,GAAG,CAAC;AAClB;AACA;;AAEA;AACA,SAASN,IAAI,CAACO,CAAS,EAAEC,CAAS,EAAEC,CAAS,EAAEC,GAAW,EAAE;EAAE;EAC1D,IAAIC,MAAY,GAAGnB,UAAU,CAACoB,IAAI,CAACL,CAAC,CAAC;EACjC,IAAII,MAAM,CAACE,UAAU,KAAK,KAAK,EAAE;IAC7BC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;EAC7C,CAAC,MAAM;IACHJ,MAAM,CAACE,UAAU,GAAG,KAAK;IACzBF,MAAM,CAACK,iBAAiB,GAAGR,CAAC;IAC5BG,MAAM,CAACM,oBAAoB,GAAGR,CAAC;IAC/BE,MAAM,CAACO,iBAAiB,GAAGR,GAAG;IAC9B,IAAGX,WAAW,KAAK,MAAM,EAAE;MACvBH,UAAU,CAACuB,IAAI,CAACR,MAAM,CAACR,KAAK,CAAC;IACjC,CAAC,MACI;MACDN,QAAQ,CAACsB,IAAI,CAACR,MAAM,CAACR,KAAK,CAAC;IAC/B;IACA;EACJ;;EACAlB,WAAW,GAAGJ,iBAAiB,EAAE;EACjCyB,UAAU,EAAG;EACbP,WAAW,GAAGM,iBAAiB,CAACC,UAAU,CAAC;AACnD"},"metadata":{},"sourceType":"module"}