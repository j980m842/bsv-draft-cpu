{"ast":null,"code":"var _jsxFileName = \"/Users/j980m842/Documents/Development/bsv-draft-cpu/src/reactComponents/gameState.tsx\";\nimport * as React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass GameState extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      gameStateReadOut: \"Start Draft\"\n    };\n    this.gameStateFormatter = () => {\n      if (this.state.gameStateReadOut == \"Start Draft\") {\n        return this.state.gameStateReadOut;\n      }\n      if (this.state.gameStateReadOut == '11') {\n        let gameStateReadOut = this.state.gameStateReadOut;\n        console.log(this.props.battleRoundSequence);\n        gameStateReadOut = 'Round: ' + this.props.battleRoundSequence;\n        this.setState({\n          gameStateReadOut\n        });\n        this.props.onDraftComplete();\n        return \"Draft Complete\";\n      }\n      if (this.pr === 'batt') return \"Next Pick: \" + this.state.gameStateReadOut;\n    };\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps.draftSequenceIndex !== this.props.draftSequenceIndex) {\n      //TRYING TO FIGURE OUT HOW TO UPDATE THIS.STATE.GAMESTATEREADOUT EACH TIME THERE IS A CHANGE IN THE DRAFT SEQUENCE INDEX PROP, OVERALL I WANT A WAY TO TRACK THE PHASE IM IN AND CHANGE WHAT IS GOING ON BASED ON THAT\n      let gameStateToString = this.props.draftSequenceIndex;\n      gameStateToString++;\n      let gameStateReadOut = gameStateToString.toString();\n      this.setState({\n        gameStateReadOut\n      });\n    }\n  }\n  render() {\n    if (this.props.gamePhase === 'battlePhase') {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.props.onBattleRoundComplete(),\n        className: \"btn m-2 btn-primary tile\",\n        children: this.gameStateFormatter()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: this.gameStateFormatter()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default GameState;","map":{"version":3,"names":["React","GameState","Component","state","gameStateReadOut","gameStateFormatter","console","log","props","battleRoundSequence","setState","onDraftComplete","pr","componentDidUpdate","prevProps","draftSequenceIndex","gameStateToString","toString","render","gamePhase","onBattleRoundComplete"],"sources":["/Users/j980m842/Documents/Development/bsv-draft-cpu/src/reactComponents/gameState.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Component } from 'react';\n\ninterface Props {\n    draftSequenceIndex: number\n    gamePhase: String\n    battleRoundSequence: number\n    onDraftComplete: any\n    onBattleRoundComplete: any\n}\n \ninterface State {\n    gameStateReadOut: String\n}\n \nclass GameState extends React.Component<Props, State> {\n    state = {\n        gameStateReadOut: \"Start Draft\"\n    }\n\n componentDidUpdate(prevProps: any): any {\n    if (prevProps.draftSequenceIndex !== this.props.draftSequenceIndex) {//TRYING TO FIGURE OUT HOW TO UPDATE THIS.STATE.GAMESTATEREADOUT EACH TIME THERE IS A CHANGE IN THE DRAFT SEQUENCE INDEX PROP, OVERALL I WANT A WAY TO TRACK THE PHASE IM IN AND CHANGE WHAT IS GOING ON BASED ON THAT\n        let gameStateToString = this.props.draftSequenceIndex\n        gameStateToString++\n        let gameStateReadOut = gameStateToString.toString()\n\n        this.setState({ gameStateReadOut })\n    }\n}  \n\ngameStateFormatter = () => {\n   if (this.state.gameStateReadOut == \"Start Draft\") {\n        return this.state.gameStateReadOut\n   }\n    if (this.state.gameStateReadOut == '11') {\n        \n        let gameStateReadOut = this.state.gameStateReadOut\n        console.log(this.props.battleRoundSequence)\n        gameStateReadOut = 'Round: ' + this.props.battleRoundSequence\n        this.setState({ gameStateReadOut })\n        this.props.onDraftComplete()\n        return \"Draft Complete\"\n        \n    }\n\n    if (this.pr === 'batt')\n\n    return \"Next Pick: \" + this.state.gameStateReadOut\n\n}\n\n\n\n\n\n    render() { \n        if (this.props.gamePhase === 'battlePhase') {\n            return (\n                <button \n                    onClick={() => this.props.onBattleRoundComplete()} \n                    className=\"btn m-2 btn-primary tile\">{this.gameStateFormatter()}\n                </button>\n            )\n        }\n\n        return ( \n            <h1>{this.gameStateFormatter()}</h1>\n            \n            \n         );\n    }\n}\n \nexport default GameState;"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAC;AAe/B,MAAMC,SAAS,SAASD,KAAK,CAACE,SAAS,CAAe;EAAA;IAAA;IAAA,KAClDC,KAAK,GAAG;MACJC,gBAAgB,EAAE;IACtB,CAAC;IAAA,KAYLC,kBAAkB,GAAG,MAAM;MACxB,IAAI,IAAI,CAACF,KAAK,CAACC,gBAAgB,IAAI,aAAa,EAAE;QAC7C,OAAO,IAAI,CAACD,KAAK,CAACC,gBAAgB;MACvC;MACC,IAAI,IAAI,CAACD,KAAK,CAACC,gBAAgB,IAAI,IAAI,EAAE;QAErC,IAAIA,gBAAgB,GAAG,IAAI,CAACD,KAAK,CAACC,gBAAgB;QAClDE,OAAO,CAACC,GAAG,CAAC,IAAI,CAACC,KAAK,CAACC,mBAAmB,CAAC;QAC3CL,gBAAgB,GAAG,SAAS,GAAG,IAAI,CAACI,KAAK,CAACC,mBAAmB;QAC7D,IAAI,CAACC,QAAQ,CAAC;UAAEN;QAAiB,CAAC,CAAC;QACnC,IAAI,CAACI,KAAK,CAACG,eAAe,EAAE;QAC5B,OAAO,gBAAgB;MAE3B;MAEA,IAAI,IAAI,CAACC,EAAE,KAAK,MAAM,EAEtB,OAAO,aAAa,GAAG,IAAI,CAACT,KAAK,CAACC,gBAAgB;IAEtD,CAAC;EAAA;EA7BAS,kBAAkB,CAACC,SAAc,EAAO;IACrC,IAAIA,SAAS,CAACC,kBAAkB,KAAK,IAAI,CAACP,KAAK,CAACO,kBAAkB,EAAE;MAAC;MACjE,IAAIC,iBAAiB,GAAG,IAAI,CAACR,KAAK,CAACO,kBAAkB;MACrDC,iBAAiB,EAAE;MACnB,IAAIZ,gBAAgB,GAAGY,iBAAiB,CAACC,QAAQ,EAAE;MAEnD,IAAI,CAACP,QAAQ,CAAC;QAAEN;MAAiB,CAAC,CAAC;IACvC;EACJ;EA2BIc,MAAM,GAAG;IACL,IAAI,IAAI,CAACV,KAAK,CAACW,SAAS,KAAK,aAAa,EAAE;MACxC,oBACI;QACI,OAAO,EAAE,MAAM,IAAI,CAACX,KAAK,CAACY,qBAAqB,EAAG;QAClD,SAAS,EAAC,0BAA0B;QAAA,UAAE,IAAI,CAACf,kBAAkB;MAAE;QAAA;QAAA;QAAA;MAAA,QAC1D;IAEjB;IAEA,oBACI;MAAA,UAAK,IAAI,CAACA,kBAAkB;IAAE;MAAA;MAAA;MAAA;IAAA,QAAM;EAI5C;AACJ;AAEA,eAAeJ,SAAS"},"metadata":{},"sourceType":"module"}