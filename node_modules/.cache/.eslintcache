[{"/Users/j980m842/Documents/Development/bsv-draft-cpu/src/index.tsx":"1","/Users/j980m842/Documents/Development/bsv-draft-cpu/src/reportWebVitals.ts":"2","/Users/j980m842/Documents/Development/bsv-draft-cpu/src/App.tsx":"3","/Users/j980m842/Documents/Development/bsv-draft-cpu/src/components/pickSequence.ts":"4","/Users/j980m842/Documents/Development/bsv-draft-cpu/src/components/executeDraft.ts":"5","/Users/j980m842/Documents/Development/bsv-draft-cpu/src/utilities/heroQuery.ts":"6","/Users/j980m842/Documents/Development/bsv-draft-cpu/src/data/heroData.ts":"7","/Users/j980m842/Documents/Development/bsv-draft-cpu/src/reactComponents/heroList.tsx":"8","/Users/j980m842/Documents/Development/bsv-draft-cpu/src/components/draftSystem.ts":"9","/Users/j980m842/Documents/Development/bsv-draft-cpu/src/reactComponents/grid.tsx":"10","/Users/j980m842/Documents/Development/bsv-draft-cpu/src/components/heroRoster.ts":"11","/Users/j980m842/Documents/Development/bsv-draft-cpu/src/components/updateDraftRoster.ts":"12","/Users/j980m842/Documents/Development/bsv-draft-cpu/src/components/armorSort.ts":"13","/Users/j980m842/Documents/Development/bsv-draft-cpu/src/components/startingPriority.ts":"14","/Users/j980m842/Documents/Development/bsv-draft-cpu/src/components/Heroes.ts":"15","/Users/j980m842/Documents/Development/bsv-draft-cpu/src/components/Hero.ts":"16","/Users/j980m842/Documents/Development/bsv-draft-cpu/src/data/boardPositionData.ts":"17"},{"size":593,"mtime":1668023517020,"results":"18","hashOfConfig":"19"},{"size":425,"mtime":1667330412150,"results":"20","hashOfConfig":"19"},{"size":4581,"mtime":1668457208356,"results":"21","hashOfConfig":"19"},{"size":437,"mtime":1668461004613,"results":"22","hashOfConfig":"19"},{"size":728,"mtime":1667357721761,"results":"23","hashOfConfig":"19"},{"size":208,"mtime":1668012626471,"results":"24","hashOfConfig":"19"},{"size":4636,"mtime":1668011752430,"results":"25","hashOfConfig":"19"},{"size":4092,"mtime":1668461514389,"results":"26","hashOfConfig":"19"},{"size":3182,"mtime":1668012702206,"results":"27","hashOfConfig":"19"},{"size":2742,"mtime":1668460357682,"results":"28","hashOfConfig":"19"},{"size":559,"mtime":1667333890904,"results":"29","hashOfConfig":"19"},{"size":264,"mtime":1667333919563,"results":"30","hashOfConfig":"19"},{"size":672,"mtime":1667333936634,"results":"31","hashOfConfig":"19"},{"size":170,"mtime":1667333919436,"results":"32","hashOfConfig":"19"},{"size":750,"mtime":1667333890847,"results":"33","hashOfConfig":"19"},{"size":799,"mtime":1667333890778,"results":"34","hashOfConfig":"19"},{"size":580,"mtime":1668457032527,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"f83h7b",{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"39"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"39"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/j980m842/Documents/Development/bsv-draft-cpu/src/index.tsx",[],[],[],"/Users/j980m842/Documents/Development/bsv-draft-cpu/src/reportWebVitals.ts",[],[],"/Users/j980m842/Documents/Development/bsv-draft-cpu/src/App.tsx",["93"],[],"import * as React from 'react';\nimport './App.css';\nimport HeroList from \"./reactComponents/heroList\"\nimport { heroData } from './data/heroData';\nimport { heroQuery } from './utilities/heroQuery';\nimport { CardSchema } from './data/cardSchema';\nimport { pickSequence } from './components/pickSequence';\nimport { Team } from './components/Team';\nimport { PickPhase } from './components/pickPhase'\n\ninterface Props {\n}\n \ninterface State {\n  eventSequenceIndex: number\n  draftableHeroes: CardSchema[],\n  draftableHeroesNames: String[],\n  draftableHeroKeyTest: String,\n  enemyHeroes: String[],\n  allyHeroes: String[], //must change ally heroes and enemy heroes to be arrays of HEROES based on CARDSCHEMA rather than just strings of their names!\n  currentPick: Team,\n  priority: Team,\n  draftSequence: Team[],\n  draftSequenceIndex: number,\n  pickPhase: PickPhase\n}\n \nclass App extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n    eventSequenceIndex: 0,\n    allyHeroes: [],\n    enemyHeroes: [],\n    draftableHeroes: [],\n    draftableHeroesNames: [],\n    draftableHeroKeyTest: '',\n    currentPick: 'ally',\n    priority: 'ally',\n    draftSequence: [],\n    draftSequenceIndex: 0,\n    pickPhase: 'picking'\n}\n}\n\ncomponentDidMount() {\n  function priorityPicker() {\n    let result = Math.random()*2\n    console.log(result)\n    let p: Team = 'ally'\n    if (result >= 1) {\n     p = 'ally' \n    } else {\n      p = 'enemy'\n    }\n    return p\n  }\n\n  let priority: Team = this.state.priority \n  priority = priorityPicker()\n  this.setState({ priority });\n\n  let draftSequence: Team[] = pickSequence(this.state.priority)\n  this.setState({ draftSequence })\n\n  let draftableHeroes = this.state.draftableHeroes\n  draftableHeroes = heroData\n  this.setState({ draftableHeroes });\n\n  let result = heroQuery('warrior')\n  console.log(this.state.draftableHeroes)\n\n  \n}\n\n\n\nhandleHeroPick = (pick: CardSchema) => {\n  \n  const allyHeroes = this.state.allyHeroes\n  allyHeroes.push(pick.name)\n  this.setState({ allyHeroes })\n\n  const draftableHeroes = this.state.draftableHeroes.filter(h => h.name !== pick.name);\n  this.setState({ draftableHeroes })\n\n  let pickPhase: PickPhase = 'placing'\n  this.setState({ pickPhase })\n\n\n\n}\n\n\nenemyDraftPick = () => {\n\n  //Executing the pick\n  let draftableHeroes = this.state.draftableHeroes\n  const index = Math.floor(Math.random()*draftableHeroes.length)\n  const pick = draftableHeroes[index]\n\n  const enemyHeroes = this.state.enemyHeroes\n  enemyHeroes.push(pick.name)\n  this.setState({ enemyHeroes })\n  console.log('enemy draft pick executed')\n\n  //cleanup and iterating draft sequence\n  draftableHeroes = this.state.draftableHeroes.filter(h => h.name !== pick.name);\n  this.setState({ draftableHeroes })\n  \n  \n  //placing the picked hero\n  let pickPhase: PickPhase = 'placing'\n  this.setState({ pickPhase })\n  \n}\n\nhandlePlaced = () => {\n  let pickPhase: PickPhase = 'picking'\n  this.setState({ pickPhase })\n\n  \n  let currentPick = this.state.currentPick\n  let draftSequenceIndex = this.state.draftSequenceIndex\n  draftSequenceIndex++\n  this.setState({ draftSequenceIndex })\n  currentPick = this.state.draftSequence[this.state.draftSequenceIndex + 1]\n  this.setState({ currentPick })\n\n\n\n}\n   \n\nrender() {\n \n  // I NEED TO CHECK IF ITS PICKING OR PLACING PHASE AND THEN PUT IN LOGIC TO ACCOMODATE TIMING\n  console.log(this.state.pickPhase +  \" -- \" + this.state.currentPick)\n\n  if (this.state.pickPhase === 'picking' && this.state.currentPick === 'enemy' ) {\n    //console.log('re-rendered with current pick == enemy')\n    \n    this.enemyDraftPick();\n  }\n\n\n  \n\n\n  return (\n\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Brimstone Valley Draft AI</h1>\n        <p>\n          Pick some Heroes!\n        </p>\n        <HeroList\n          allyHeroes={this.state.allyHeroes}\n          enemyHeroes={this.state.enemyHeroes}\n          draftableHeroes={this.state.draftableHeroes}\n          draftableHeroesNames={this.state.draftableHeroesNames}\n          draftableHeroKeyTest={this.state.draftableHeroKeyTest}\n          currentPick={this.state.currentPick}\n\n          onHeroPick={this.handleHeroPick}\n          pickPhase={this.state.pickPhase}\n          onPlaced={this.handlePlaced}\n        />\n        \n      </header>\n      <footer>\n      <a\n          className=\"App-link\"\n          href=\"https://brimstonevalley.com\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Play Brimstone Valley\n        </a>\n      </footer>\n    </div>\n  );\n}\n \n}\n\n\n\n\nexport default App;\n\n","/Users/j980m842/Documents/Development/bsv-draft-cpu/src/components/pickSequence.ts",[],[],"/Users/j980m842/Documents/Development/bsv-draft-cpu/src/components/executeDraft.ts",["94","95","96","97","98","99","100","101"],[],"import { Hero } from \"./Hero\";\nimport { Heroes } from \"./Heroes\";\nimport { heroRoster } from \"./heroRoster\";\nimport { updateDraftRoster } from \"./updateDraftRoster\";\nimport { Team } from \"./Team\";\nimport { startingPriority } from \"./startingPriority\";\nimport { pickSequence } from \"./pickSequence\";\nimport { armorSort } from \"./armorSort\";\nimport { draft, userHeroes, aIHeroes } from \"./draftSystem\";\n\nexport function executeDraft() {\n\ndraft();\ndraft();\ndraft();\ndraft();\ndraft();\ndraft();\ndraft();\ndraft();\ndraft();\ndraft();\n\nconsole.log(\"user's team is \")\nconsole.log(userHeroes)\nconsole.log(\"AI's team is \")\nconsole.log(aIHeroes)\n\nlet drafted = {\n    userHeroes: userHeroes,\n    aIHeroes: aIHeroes\n}\n\n    return drafted\n\n};\n\n","/Users/j980m842/Documents/Development/bsv-draft-cpu/src/utilities/heroQuery.ts",["102"],[],"import { heroData } from \"../data/heroData\"\nimport { CardSchema } from '../data/cardSchema';\n\n\nexport function heroQuery(hero: String) {\n    let result = heroData.find(h => h.key === hero)\n    return result\n}","/Users/j980m842/Documents/Development/bsv-draft-cpu/src/data/heroData.ts",[],[],"/Users/j980m842/Documents/Development/bsv-draft-cpu/src/reactComponents/heroList.tsx",["103","104","105","106","107"],[],"/Users/j980m842/Documents/Development/bsv-draft-cpu/src/components/draftSystem.ts",["108","109","110","111"],[],"import { Hero } from \"./Hero\";\nimport { Heroes } from \"./Heroes\";\nimport { heroRoster } from \"./heroRoster\";\nimport { updateDraftRoster } from \"./updateDraftRoster\";\nimport { Team } from \"./Team\";\nimport { startingPriority } from \"./startingPriority\";\nimport { pickSequence } from \"./pickSequence\";\nimport { armorSort } from \"./armorSort\";\n\n\n\nlet draftRoster: Array<Hero> = updateDraftRoster()\n//SORTING FUNCTIONS WORKING!!\nlet armorSorted: Array<Hero> = armorSort();\nlet highestArmor: Array<Hero> = armorSorted.filter(tied => tied._armor === armorSorted[0]._armor)\n//console.log(highestArmor)\n\n\nlet healthSorted: Array<Hero> = heroRoster.healthSort();\nlet highestHealth: Array<Hero> = healthSorted.filter(tied => tied._health === healthSorted[0]._health)\nexport let userHeroes: Array<string> = []\nexport let aIHeroes: Array<string> = []\n\ndeclare function require(name: string): any;\n\n//TRYING TO FIGURE OUT HOW TO MANUALLY INPUT PICKS\n/*let prompt = require('prompt');\nprompt.start();\nawait prompt.get(['hero', 'row', 'column', 'bookReadPosition'], function (err: any, result: any) {\n  console.log(result.hero);\n});\n*/\n\nexport async function draft() {\n    if(currentPick === \"ally\") {\n        /*let prompt = require('prompt');\n        prompt.start();\n        await prompt.get(['hero', 'row', 'column', 'bookReadPosition'], function (err: any, result: any) {\n        console.log('Command-line input received:');\n        console.log(result.hero);\n        pick(result.hero, result.row, result.column, result.bookReadPosition)\n        });*/\n        pick(userPicks.shift(0), 2, 2, 5);\n        \n    }\n    else {\n        armorSorted = armorSort();\n        highestArmor = armorSorted.filter(tied => tied._armor === armorSorted[0]._armor)\n        pick(highestArmor[0]._name, 1, 2, 2)\n\n        \n    }\n}\n\n//DRAFT \n\nlet userPicks: any = [\"werewolf\", \"poisonMage\", \"iceMage\", \"blacksmith\", \"berserker\"] // find a way to be able to type this rather than any type!\n\nlet firstpick: Team = startingPriority();\n//console.log(firstpick)\nlet pickSequenceArray: Array<Team> = pickSequence(firstpick);\nlet currentPick: Team = firstpick;\nlet pickNumber = 0;\n//console.log(firstpick);\n//console.log(pickSequenceArray);\n\n//this function selects a draftable hero and changes board position, h = hero, r = row, c = column, brp = bookread position\nfunction pick(h: string, r: number, c: number, brp: number) { //I think hero name, row, and column all need to be types\n    let picked: Hero = heroRoster.Find(h);\n        if (picked._draftable === false) {\n            console.log(\"That hero isn't draftable!\");\n        } else {\n            picked._draftable = false;\n            picked._boardPositionRow = r;\n            picked._boardPositionColumn = c;\n            picked._bookReadPosition = brp;\n            if(currentPick === \"ally\") {\n                userHeroes.push(picked._name);\n            }\n            else {\n                aIHeroes.push(picked._name);\n            }\n            //add functionality to add the selected hero to an actual team's board\n        }\n        draftRoster = updateDraftRoster();\n        pickNumber ++;\n        currentPick = pickSequenceArray[pickNumber]\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","/Users/j980m842/Documents/Development/bsv-draft-cpu/src/reactComponents/grid.tsx",["112"],[],"/Users/j980m842/Documents/Development/bsv-draft-cpu/src/components/heroRoster.ts",[],[],"/Users/j980m842/Documents/Development/bsv-draft-cpu/src/components/updateDraftRoster.ts",[],[],"/Users/j980m842/Documents/Development/bsv-draft-cpu/src/components/armorSort.ts",["113","114","115","116","117"],[],"import { Hero } from \"./Hero\";\nimport { Heroes } from \"./Heroes\";\nimport { heroRoster } from \"./heroRoster\";\nimport { updateDraftRoster } from \"./updateDraftRoster\";\nimport { Team } from \"./Team\";\nimport { startingPriority } from \"./startingPriority\";\nimport { pickSequence } from \"./pickSequence\";\n\nexport function armorSort(): Array<Hero> {\n    \n    let draftableArmorSort = updateDraftRoster() //will need to add functionality to check which heroes need to be armor sorted based on whether we are in draft, in game, checking allies vs. enemies etc...\n    \n    draftableArmorSort.sort((a, b) => {\n        return b.armor - a.armor;\n    });\n    return draftableArmorSort\n}","/Users/j980m842/Documents/Development/bsv-draft-cpu/src/components/startingPriority.ts",[],[],"/Users/j980m842/Documents/Development/bsv-draft-cpu/src/components/Heroes.ts",[],[],"/Users/j980m842/Documents/Development/bsv-draft-cpu/src/components/Hero.ts",[],[],"/Users/j980m842/Documents/Development/bsv-draft-cpu/src/data/boardPositionData.ts",[],[],{"ruleId":"118","severity":1,"message":"119","line":71,"column":7,"nodeType":"120","messageId":"121","endLine":71,"endColumn":13},{"ruleId":"118","severity":1,"message":"122","line":1,"column":10,"nodeType":"120","messageId":"121","endLine":1,"endColumn":14},{"ruleId":"118","severity":1,"message":"123","line":2,"column":10,"nodeType":"120","messageId":"121","endLine":2,"endColumn":16},{"ruleId":"118","severity":1,"message":"124","line":3,"column":10,"nodeType":"120","messageId":"121","endLine":3,"endColumn":20},{"ruleId":"118","severity":1,"message":"125","line":4,"column":10,"nodeType":"120","messageId":"121","endLine":4,"endColumn":27},{"ruleId":"118","severity":1,"message":"126","line":5,"column":10,"nodeType":"120","messageId":"121","endLine":5,"endColumn":14},{"ruleId":"118","severity":1,"message":"127","line":6,"column":10,"nodeType":"120","messageId":"121","endLine":6,"endColumn":26},{"ruleId":"118","severity":1,"message":"128","line":7,"column":10,"nodeType":"120","messageId":"121","endLine":7,"endColumn":22},{"ruleId":"118","severity":1,"message":"129","line":8,"column":10,"nodeType":"120","messageId":"121","endLine":8,"endColumn":19},{"ruleId":"118","severity":1,"message":"130","line":2,"column":10,"nodeType":"120","messageId":"121","endLine":2,"endColumn":20},{"ruleId":"118","severity":1,"message":"131","line":2,"column":10,"nodeType":"120","messageId":"121","endLine":2,"endColumn":19},{"ruleId":"118","severity":1,"message":"132","line":3,"column":10,"nodeType":"120","messageId":"121","endLine":3,"endColumn":21},{"ruleId":"118","severity":1,"message":"133","line":7,"column":10,"nodeType":"120","messageId":"121","endLine":7,"endColumn":20},{"ruleId":"118","severity":1,"message":"134","line":10,"column":10,"nodeType":"120","messageId":"121","endLine":10,"endColumn":27},{"ruleId":"118","severity":1,"message":"135","line":11,"column":10,"nodeType":"120","messageId":"121","endLine":11,"endColumn":18},{"ruleId":"118","severity":1,"message":"123","line":2,"column":10,"nodeType":"120","messageId":"121","endLine":2,"endColumn":16},{"ruleId":"118","severity":1,"message":"136","line":12,"column":5,"nodeType":"120","messageId":"121","endLine":12,"endColumn":29},{"ruleId":"118","severity":1,"message":"137","line":20,"column":5,"nodeType":"120","messageId":"121","endLine":20,"endColumn":31},{"ruleId":"118","severity":1,"message":"138","line":24,"column":18,"nodeType":"120","messageId":"121","endLine":24,"endColumn":25},{"ruleId":"118","severity":1,"message":"131","line":2,"column":10,"nodeType":"120","messageId":"121","endLine":2,"endColumn":19},{"ruleId":"118","severity":1,"message":"123","line":2,"column":10,"nodeType":"120","messageId":"121","endLine":2,"endColumn":16},{"ruleId":"118","severity":1,"message":"124","line":3,"column":10,"nodeType":"120","messageId":"121","endLine":3,"endColumn":20},{"ruleId":"118","severity":1,"message":"126","line":5,"column":10,"nodeType":"120","messageId":"121","endLine":5,"endColumn":14},{"ruleId":"118","severity":1,"message":"127","line":6,"column":10,"nodeType":"120","messageId":"121","endLine":6,"endColumn":26},{"ruleId":"118","severity":1,"message":"128","line":7,"column":10,"nodeType":"120","messageId":"121","endLine":7,"endColumn":22},"@typescript-eslint/no-unused-vars","'result' is assigned a value but never used.","Identifier","unusedVar","'Hero' is defined but never used.","'Heroes' is defined but never used.","'heroRoster' is defined but never used.","'updateDraftRoster' is defined but never used.","'Team' is defined but never used.","'startingPriority' is defined but never used.","'pickSequence' is defined but never used.","'armorSort' is defined but never used.","'CardSchema' is defined but never used.","'Component' is defined but never used.","'arrayBuffer' is defined but never used.","'AnyARecord' is defined but never used.","'boardPositionData' is defined but never used.","'heroData' is defined but never used.","'draftRoster' is assigned a value but never used.","'highestHealth' is assigned a value but never used.","'require' is defined but never used."]